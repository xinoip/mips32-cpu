// memory data file (do not edit the following line - required for mem load use)
// instance=/mips32_testbench/test_mips32/imemory/memory
// format=bin addressradix=h dataradix=b version=1.0 wordsperline=1 noaddress
// lui sw lw test
// lui $7 1110011100111001
00111100000001111110011100111001
// sw $7 2($6)
10101100110001110000000000000010
// lw $5 2($6)
10001100110001010000000000000010

// j test
// j 4
00001000000000000000000000000100
// sw $2 2($1) (dummy will jump over)
10101100001000100000000000000010
// lw $3 2($1) (dummy will jump over)
10001100001000110000000000000010
// lw $3 2($1) (dummy will jump over)
10001100001000110000000000000010
// lui $7 1110011100111001
00111100000001111110011100111001

// jal test
// jal 4
// 00001100000000000000000000000100
// sw $2 2($1) (dummy will jump over)
// 10101100001000100000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lui $7 1110011100111001
// 00111100000001111110011100111001

// jr test
// jr $4
// 00000000100000000000000000001000
// sw $2 2($1) (dummy will jump over)
// 10101100001000100000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lui $7 1110011100111001
// 00111100000001111110011100111001

// beq test
// beq $1 $5 to 4th instruction
// 00010000001001010000000000000011
// sw $2 2($1) (dummy will jump over)
// 10101100001000100000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lui $7 1110011100111001
// 00111100000001111110011100111001

// bne test
// bne $1 $5 to 4th instruction
// 00010100001001010000000000000011
// sw $2 2($1) (dummy will jump over)
// 10101100001000100000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lw $3 2($1) (dummy will jump over)
// 10001100001000110000000000000010
// lui $7 1110011100111001
// 00111100000001111110011100111001

// ori test
// ori $17 $16 1110001110001110
// 00110110000100011110001110001110

// addn test
// addn $3 $1 $2
// 00000000001000100001100000100000

// subn test
// subn $3 $1 $2
// 00000000001000100001100000100010

// orn test
// orn $3 $1 $2
// 00000000001000100001100000100101

// xorn $3 $1 $2
// 00000000001000100001100000100110

// andn $3 $1 $2
// 00000000001000100001100000100100